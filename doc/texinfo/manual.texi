\input texinfo
@comment $Id@w{$}
@comment %**start of header
@settitle cpic

@c @contents

@node manual

This is a sample manual.  There is no sample program to
invoke, but if there were, you could see its basic usage
and command line options here.

@contents

@chapter Data structures

In order to achieve good performance, a set of particularly designed
data structured are being used. They can be divided in two main groups
regarding to the fields or the plasma storage.

@anchor{field-storage}
@section Storage of the fields

The three fields used in the simulation (electric, electric
potential and electric charge) are stored using the mat data structure

@section Storage of plasma

All particles in the simulation are divided first into each MPI process,
by slicing the Y dimension into non-overlapping blocks. Inside each
block, the plasma is further divided into non-overlapping chunks in the
X dimension.

@anchor{pchunk}
@subsection Plasma chunk

A chunk contains all the information of the plasma in a given spatial
region of the simulation. The data structure is called pchunk, from
plasma chunk.

A plasma chunk can contain multiple species of particles. Each specie
may contain a large set of particles. Each set of particles is stored in
a pset.

@anchor{pset}
@subsection Plasma set

The particles of one specie in a chunk are stored into a special list
designed to be used with vectorized operations, the plist.

@anchor{plist}
@subsection Plasma list

The list is formed by blocks of particles grouped in packs of the vector
size.

@anchor{pblock}
@subsection Plasma block

A block of ppacks.

@anchor{pwin}
@subsection Pack window

A window is used to select particles within a plasma pack. Several masks
are used to inform of the state of each particle. The window can be
slide and positioned in each ppack of a plist.

@anchor{ppack}

A plasma or particle pack (ppack) contains @code{MAX_VEC} particles,
were each member of the particle is interleave. FIXME.

@chapter Plasma communication

As particles move around they may move outside of their designated
@ref{pchunk}, which then will need to be moved to the correct pchunk.
Particles outside their chunk are called lost particles.

The simulation guarantees that in one time-step the maximum distance
traveled by any particle is at most the chunk space. Then, a lost
particle can only be in the 8 neighbour chunks. This reduces the
communications between chunks.

The communication of particles is done in two stages. First the lost
particles are translated in the X dimension in the @code{comm_plasma_x}
step and then in the Y dimension in @code{comm_plasma_y}.

@section Communication of plasma in X

Lost particles are moved to their correct chunk in parallel. The
process involves two steps:

@itemize
@item @code{local_collect_x}: Collect particles into queues
@item @code{exchange_particles_x}: Place the collected particles into
the appropriate chunk.
@end itemize

@section Collect particles in X

The process involves a set of careful operations to deal with the plist
structure. In the collection step, lost particles are identified, marked and
transferred to one of the two queues of the @ref{pset}, @code{qx0} or
@code{qx1}.

In the first pass the count of particles transferred to the queues is
annotated and used to ensure that no particles were lost. Then another
pass is done, to ensure that no lost particles are left in the list.
This last second pass is only enabled in debug mode.

The collection algorithm is distributed in several steps. Two windows
(@xref{pwin}) A and B are used along the list of particles in the particle
set.

The window A is placed at the start of the list pointing to the first
pack and the window B points to the last non-empty pack of the list.

The task of the B window is to look for extra particles: the ones that
will remain in the chunk. Usually most particles will be in the chunk,
so only a few checks should be necessary. In case there are some lost
particles they are moved to the corresponding queue in the set (either
@code{qx0} or @code{qx1}).

If no extra particles are found, the B window is slide to the previous
pack and the search continues until at least one extra particle is
found.

Then is the turn of the A window, which will begin from the start of the
list and look for lost particles, which we call holes. As soon as a hole
is found, the process stops and the next step begins. If no holes are
found, the A window is slide to the next pack and the search continues.

Finally, we reach a state where we have some extra particles in B and
some holes in A. Therefore we can transfer at least one particle from B
to fill the holes in A. All holes are filled unless there are no enough
extra particles in B.

At least one of the two windows is now complete (either A with no
holes or B with no extra particles). Completed windows are advanced
towards themselves to continue with the process.

The process completes when the two windows are pointing to the same
pack. To finish the collection process, the last pack pointed by the
windows is analyzed to remove any lost particles. And the remaining
particles are packed into the left.

@section Exchange particles in X

The exchange algorithm moves particles between plasma chunks always
reading from the queues of the two neighbour chunks in X and appending
the particles into the plasma list.

Therefore, the exchange phase can begin if the collection phase has
finished for the current chunk, as well as the two neighbour chunks in
X.

The exchange algorithm is first executed to fill the list with particles
from the queue qx0, and then with the queue qx1.

The algorithm is divided in two steps: filling the last pack and then
appending the rest of packs in the list.

It turns out the last pack of the list may not be complete. Then, if the
queue were simply copied behind, all packs would require to be modified
to shift the particles. To avoid changing all the packs, the list if
first filled to complete the last pack using particles from the end of
the list. Notice the particles must be transferred from the end of the
last pack of the queue, not from the beginning.

Once the list has the last pack complete, the bulk pack filling can
begin, which will only append all remaining packs of the queue into the
list. This operation can even use other advanced memory transfer
techniques, as all the particles are copied from a contiguous region of
memory.

In the case of multiple blocks involved in the transference, the
pointers can be modified to continue in the queue to alleviate the copy
of particles, but this optimization is not yet implemented. The number
of exchanged particles between chunks should be low.

@chapter SIMD operations

Most SIMD operations are written directly using the Intel 
@url{https://software.intel.com/sites/landingpage/IntrinsicsGuide/,
intrinsic functions}, as it gives fine control to the manipulation of
vector elements.

A set of macros are created to interface the AVX-2 and AVX-512 via a
similar way. Therefore the code is kept clean of @code{ifdef} and only
uses the defined macros. Currently only AVX-2 and AVX-512 is supported,
but it could be implemented without vector instructions, in order to
execute the code in non-AVX CPUs, which could be handy for debugging.

There are several types defined to hold a vector of floating point and
integer numbers.

@itemize
@item @code{vf64}: Contains double precision floating point numbers of 64 bits.
@item @code{vi64}: Contains signed integer numbers of 64 bits.
@item @code{vmsk}: Contains bit masks for at least @code{MAX_VEC} elements.
@end itemize

All types and functions are prefixed with the letter @code{v} to
identify the vectorized nature of the operations. The operations applied
to floating point vectors are prefixed only with @code{v}, but other
types are prefixed with the type and underscore: @code{vi64_} and
@code{vmsk_}.

@section Memory operations

@table @code
@item vset1(x)
Broadcast the value x in all the elements of the vector.
@item vload(x)
Loads the vector in the address pointed by x.
@item vstore(a, b)
Stores the vector a into the address b.
@item vstream(a, b)
Stores the vector a into the address b without going through the cache.
@item vgather(b,i)
Takes the base address b and loads the elements at offset i.
@item vi32_set1(x)
Broadcasts the value x with type i32 into a vector.
@item vi64_set1(x)
Broadcasts the value x with type i64 into a vector.
@end table

@section Arithmetic operations

@table @code
@item vsqrt(x)
Returns the square root of each element in x
@item vfloor(x)
Returns the floor of each element in x
@item vi64 vi64_remod(vi64 a, vi64 b)
Returns @code{a >= b ? (a - b) : a} for each element. The name comes from
reduced mod, as it is a particular case of the module operation.
@item vf64 remod(vf64 a, vf64 b)
@item vf64 remodinv(vf64 a, vf64 b, vf64 c)
@item vabs(x)
@item vcmp(a, b, f)
@end table

@section Mask operations

@example
vand(a, b)
vor(a, b)
vnot(a)
vmsk vmsk_set(unsigned long long v)
vmsk_get(vmsk m)
@end example

@section Miscellaneous operations

@example
vi64 vf64_to_vi64(vf64 x)
@end example

@chapter Window-based operations

The window-based movement is a key concept to work with the vectorized
operations of AVX-2 and AVX-512 instruction set of the Intel processors.
Operations on particles are generally performed by vector instructions,
which operate on multiple elements at once. The number of elements
depends on the SIMD extensions enabled and the length of the element
type. By default, double precision is used with 64 bits (8 bytes) per
elements, similarly for integers, which use 64 bits.

On AVX-2 the vector length is 256 bits, so 4 elements can be processed
at once. With AVX-512, we can process 8 elements at once with the 512
bits vectors. The number of elements in a vector is defined as
@anchor{MAX_VEC} @code{MAX_VEC} and is usually 4 or 8.

@section Window data structure

A window points to a @ref{ppack} by using the @ref{pblock} index
@code{ib} and the pack index @code{ip} inside the block, called the
selected pack.

Additionally, a set of masks are used to select particles inside the
pack. Particles are selected with a bit mask of 1 and not selected with
0. The @code{enabled} mask determines which particles of the pack are
currently part of the block, as it may happen the selected pack is at
the end and is not complete.

@section Moving particles using windows

There are two types of movements: parallel and non-parallel.

@float Figure,fig:ppack-parallel-move
@image{ppack-parallel-move}
@end float

In the parallel move, a mask determines which particles are required to
move, and then are moved using one instruction per vector-line. This is
a very efficient way of transferring particles around, as we don't need
to change their position inside the pack, as seen in the
@ref{fig:ppack-parallel-move}.

@float Figure,fig:ppack-non-parallel-move
@image{ppack-non-parallel-move}
@end float

In contrast, in a non-parallel move, the particles change their index in
the pack, and thus they cannot be moved using one instruction per
vector-line as seen in the @ref{fig:ppack-non-parallel-move}. This
operation has a large computational cost compared with a parallel move
and must be avoided. The current implementation addresses one particle
at a time, but it may be more efficient to use a combination of partial
parallel moves and shifts.

@section Operations

The plist needs to support the following operations:

@itemize
@item Creation of a new empty list.
@item Opening a list for modification only (the case of the A window)
@item Opening a list for elimination only (the B window)
@item Opening a list for append only (the case of the queues when
collecting particles)
@end itemize

@section Particle position and wrapping

The simulation space is a 2 dimensional plane beginning in the zero coordinate
and ending in L. At the initialization stage, each chunk contains a similar
portion of particles from the simulation. Once the are assigned a position, it
may exceed the chunk boundaries, so the simulation will first place all
particles in the correct chunk, before starting the simulation.

The @code{global_exchange} flag determines the scope of the particle
communicacion process: if is true, particles are moved to the neighbour chunk N
times, where N is the number of chunks in that dimension, to guarantee that all
particles can reach the correct chunk.

Otherwise, when is zero, only a local exchange is executed, and the particles
only move to their immediate neighbour.

@subsection Particle wrapping

In the initialization stage, the particle position r should not exceed the
simulation space. Otherwise the position is first wrapped by using the periodic
boundary properties. Then the new position is used to determine if they exceed
any boundary of the chunk they reside. The particle is then moved chunk by chunk
to the correct one.

In the simulation stage, the particles can exceed the simulation space, as their
position is updated. As we will only communicate with the immediate chunks, the
position cannot be wrapped yet, until the correct direction to send the particle
is determined.

Particle positions are evaluated against the chunk boundaries x0 and x1. Let l
be the chunk lenght, then in the simulation mode particle positions must always
be kept in (x0-l, x1+l). Otherwise the particle would need to travel more than
one chunk.

Therefore, when a particle position r is updated and exceeds (0,L), it can only
exceed it by up to l in both sides. If the wrapping is done before the particle
is moved, the new position r' will exceed the allowed range, and we won't be
able to transfer the particle to the correct chunk in one step, as we will send
the particle along the simulation space, instead of reaching the other end chunk
by the periodic boundary.

@bye
